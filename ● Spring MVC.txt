■■■ Spring MVC ■■■

1. 웹 개발을 위한 MVC 패턴이 적용된 Spring Framework.
   Spring 에서는 DispatcherServlet 클래스가 컨트롤러 역할을 수행하게 된다.

2. Spring MVC 의 주요 구성요소
   - DispatcherServlet
   - HandlerMapping
   - Controller : 사용자 정의 Controller. 액션처리. 우리가 작성.
   - ModelAndView
   - ViewResolver
   - view : 결과 출력. 우리가 작성.
   - web.xml : DispatcherServlet 객체 등록. 우리가 작성.
   - dispatcher-servlet.xml : controller 객체 등록. 우리가 작성.

3. Spring MVC 실행 흐름
   - 사용자 요청 → DispatcherServlet
   - DispatcherServlet → HandlerMapping 에 주소 분석 요청.
   - DispatcherServlet → 특정 Controller 객체 호출 및 결과 수신.
                          결과는 ModleAndView 객체.

     ※ ModelAndView 객체
        : View 객체 정보와 결과값이 들어있는 객체.
   - DispatcherServlet → ViewResolver 에 View 객체 분석 요청.
   - DispatcherServlet → 특정 View 객체에 Model 객체를 넘겨주고 
                          결과 출력.

4. Spring MVC 에서 우리가 해야 할 일
   - Controller
     액션 처리를 담당하는 Controller 클래스 작성.
     Annotation 을 사용하지 않으면, Controller 인터페이스를 구현하여 작성.

   
   - View
     결과 출력용 JSP 페이지 작성.

   
   - Web.xml
     서블릿 주소와 DispatcherServlet 클래스 등록.


   - dispatcher-servlet.xml
     우리가 작성한 Controller 객체 등록.   
     URL 매핑 주소 증록.

※ Spring 이 스트럿츠를 비롯하여 다양한 웹 프레임워크와
   비교적 연동이 잘 되는 편이기는 하지만
   서로 다른 두 프레임워크를 연동하기 위해서는
   설정의 중복 등 개발 과정에서 불편함이 존재할 수밖에 없다. 
   따라서, Spring 이 제공하는 AOP, 트랜잭션 처리, IoC/DI 등의 기능을
   그대로 사용하면서 MVC 패언에 기반하여 웹 어플리케이션을 개발할 수 있다. 
   또한, 다른 프레임워크를 Spring 을 연동하기 위해서
   설정을 중복해서 적용해야 한다든지... 하는 개발 과정에서 나타나는 
   불편을 해소할 수 있게 된다.

-------------------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 실습 01 ■■■

○ Perspective
   : JavaEE
○ 다이나믹 웹 프로젝트 생성
   : mvc01
○ 톰캣 서버 등록 및 포트(port) 설정
   : port 8090 / URIEncoding="UTF-8"
○ 기타 환경 설정
   : 폰트, 줄번호, 편집포맷, 인코딩방식, 템플릿 등...
○ Spring MVC 환경 설정을 위한 라이브러리 등록
   : WebContent > WEB-INF > lib 경로에 등록
     - 경로 1 →  C:\s-f-3.0.2-with-docs\spring-framework-3.0.2.RELEASE\dist
       · 파일1 → org.springframework.aop-3.0.2.RELEASE.jar
       · 파일2 → org.springframework.asm-3.0.2.RELEASE.jar
       · 파일3 → org.springframework.beans-3.0.2.RELEASE.jar
       · 파일4 → org.springframework.context-3.0.2.RELEASE.jar
       · 파일5 → org.springframework.core-3.0.2.RELEASE.jar
       · 파일6 → org.springframework.expression-3.0.2.RELEASE.jar
       · 파일7 → org.springframework.jdbc-3.0.2.RELEASE.jar
       · 파일8 → org.springframework.transaction-3.0.2.RELEASE.jar
       · 파일9 → org.springframework.web-3.0.2.RELEASE.jar
       · 파일10 → org.springframework.web.servlet-3.0.2.RELEASE.jar

     - 경로 2 →  C:\s-f-3.0.2-dependencies\org.apache.commons
                   \com.springsource.org.apache.commons.logging\1.1.1
       · 파일11 → com.springsource.org.apache.commons.logging-1.1.1.jar

     - 경로 3 →  C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib
                  (오라클 설치 경로)
       · 파일12 → ojdbc6.jar

     - 경로 4 →  C:\Downloads\15_JSTL\jakarta-taglibs-standard-1.1.2\lib
                  (JSTL 다운로드 경로)
       · 파일13 → jstl.jar
       · 파일14 → standard.jar

○ 물리적 파일 구성
   - HelloController.java
   - Hello.jsp
   - dispatcher-servlet.xml
   - web.xml
   - hello.action

     ※ 『dispatcher-servlet.xml』 파일의 기본 설정 내용(템플릿)을 복사하기 위해
        스프링 DOC의 내용을 참고해서 작성할 수 있도록 한다.
        ·경로 → C:\s-f-3.0.2-with-docs\spring-framework-3.0.2.RELEASE\docs\spring-framework-reference\pdf
        ·파일 → spring-framework-reference.pdf
        ·내용(위치) → 문서 형식상 (425 페이지)
                        실제 내용상 (450 페이지)
        ·해당 위치로 이동하면 XML 파일에 대한 샘플 코드가 있다.
          이 내용을 복사해서 dispatcher-servlet.xml 파일의 기본 내용으로 작성한다.  

○ 사용자 최초 요청 주소
http://localhost:8090/mvc01/hello.action


※ 우리가 작성한 mvc01 프로젝트의 실행 및 처리 과정 정리

   ① 외부 요청
      http://localhost:8090/mvc01/hello.action

      → web.xml 관여
         (→ Front Controller 등록 → DispatcherServlet 등록)

   ② DispatcherServlet 요청 접수

      → web.xml → DispatcherServlet 등록
         web.xml → URL 패턴 등록
      
      → 사용자 요청 분석 → 특정 컨트롤러 지정
   
   ③ 해당 컨트롤러의 특정 메소드 호출(액션 처리, ModelAndView 객체 반환)
  
      → 사용자의 요청에 맞는 액션 처리
     
      → 결과 데이터가 들어있는 모델 객체 준비

      → 뷰 정보(JSP 페이지 정보) 반환
 
         ※ JSP 페이지 정보
            - 여기서는 객체가 아닌 경로 포함된 View 페이지의 이름

   ④ 뷰 페이지는 최종 웹 페이지를 작성
   
      → JSP 페이지 내에서  EL 이나 JSTL 등의 표기 사용 가능

   ⑤ 응답 완료~!!!